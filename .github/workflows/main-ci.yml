name: Hugin CLI Main Pipeline

env:
  GITHUB_REGISTRY: 'ghcr.io'
  GITHUB_OWNER: 'kryptokrona'
  GITHUB_DOCKER_IMAGE: 'hugin-cli'

on:
  push:
    branches:
      - master

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - {
             name: "Windows Latest MSVC / x64", artifact: "Windows-MSVC-x64",
             os: windows-latest,
             cc: "cl", cxx: "cl",
             environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
           }
          - {
            name: "Windows Latest MinGW / x64", artifact: "Windows-MinGW-x64",
            os: windows-latest,
            cc: "gcc", cxx: "g++"
          }
          - {
            name: "Ubuntu Latest GCC / x64", artifact: "Linux-x64",
            os: ubuntu-22.04,
            cc: "gcc", cxx: "g++"
          }
          - {
             name: "macOS Latest Clang / x64", artifact: "macOS-x64",
             os: macos-latest,
             cc: "clang", cxx: "clang++"
           }
    steps:
      - uses: actions/checkout@v2

      # Windows MSVC
      - name: Install Dependencies
        if: matrix.config.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: mkdir build
        if: matrix.config.os == 'windows-latest'
        run: mkdir build

      - name: Build Windows Target using Visual C++
        if: matrix.config.os == 'windows-latest'
        working-directory: build
        run: |
         cmake -G "Visual Studio 17 2022" -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17" ..

      - name: Upload MSVC Artifact
        if: matrix.config.artifact == 'Windows-MSVC-x64'
        uses: actions/upload-artifact@v3
        with:
          name: msvc-x64
          path: |
            out/build/x64-Debug/Hugin

      - name: Upload MinGW Artifact
        if: matrix.config.artifact == 'Windows-MinGW-x64'
        uses: actions/upload-artifact@v3
        with:
          name: mingw-x64
          path: |
            build/Hugin
      
      # Ubuntu 22.04
      - name: mkdir build
        if: matrix.config.os == 'ubuntu-22.04'
        run: mkdir build

      - name: Build Ubuntu Target
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          cmake -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17"  ..
          make
        working-directory: build

      - name: Upload Ubuntu Artifact
        if: matrix.config.artifact == 'Linux-x64'
        uses: actions/upload-artifact@v3
        with:
          name: linux-x64
          path: |
            build/Hugin

      # macOS
      - name: Install dependencies on macOS
        if: matrix.config.os == 'macos-latest'
        run: |
          brew install cmake ninja
          ninja --version
          cmake --version

      - name: mkdir build
        if: matrix.config.os == 'macos-latest'
        run: mkdir build

      - name: Build macOS Target
        if: matrix.config.os == 'macos-latest'
        run: |
          cmake -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17"  ..
          make
        working-directory: build

      - name: Upload macOS Artifact
        if: matrix.config.artifact == 'macOS-x64'
        uses: actions/upload-artifact@v3
        with:
          name: macos-x64
          path: |
            build/Hugin

  docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-22.04
    needs: [ build ]
    steps:
      - uses: actions/checkout@v2
      - uses: benjlevesque/short-sha@v1.2

      - name: Log into registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker
        run: |
          docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} .
      - name: Publish Docker
        run: |
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}
